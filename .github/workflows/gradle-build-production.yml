name: Gradle Build - Production
on:
  push:
    branches:
      - 'master'
      - 'release/*'
env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}
  RUN_REGION: us-central1
  SERVICE_NAME: checkins-master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node 14
        uses: actions/setup-node@v2-beta
        with:
          node-version: '14'
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew assemble
        env:
          REACT_APP_API_URL: https://checkins-master-tuvcfzotpq-uc.a.run.app
      - name: Gradle runs tests
        run: ./gradlew check
      - name: Setup gcloud CLI
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.RUN_SA_KEY }}
          project_id: ${{ secrets.RUN_PROJECT }}
      - name: Auth Configure Docker
        run: |-
            gcloud --quiet auth configure-docker
      - name: Build the Docker image
        run: |-
            cd server
            docker build --tag "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA" .
      - name: Push the Docker image to Google Container Registry
        run: |-
            cd server
            docker push "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA"
      - name: Deploy image to Cloud Run
        run: |-
            gcloud run deploy "$SERVICE_NAME" \
              --quiet \
              --region "$RUN_REGION" \
              --image "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA" \
              --memory 1Gi \
              --add-cloudsql-instances ${{ secrets.PROD_DB_CONNECTION_NAME }} \
              --set-env-vars "CLOUD_DB_CONNECTION_NAME=${{ secrets.PROD_DB_CONNECTION_NAME }}" \
              --set-env-vars "DB_NAME=${{ secrets.PROD_DB_NAME }}" \
              --set-env-vars "DATASOURCES_DEFAULT_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" \
              --set-env-vars "DATASOURCES_DEFAULT_USERNAME=${{ secrets.PROD_DB_USERNAME }}" \
              --set-env-vars "OAUTH_CLIENT_ID=${{ secrets.OAUTH_CLIENT_ID }}" \
              --set-env-vars "OAUTH_CLIENT_SECRET=${{ secrets.OAUTH_CLIENT_SECRET }}" \
              --set-env-vars "DIRECTORY_ID=${{ secrets.PROD_DIRECTORY_ID }}" \
              --set-env-vars "TYPE=${{ secrets.PROD_TYPE }}" \
              --set-env-vars "PROJECT_ID=${{ secrets.PROD_PROJECT_ID }}" \
              --set-env-vars "PRIVATE_KEY_ID=${{ secrets.PROD_PRIVATE_KEY_ID }}" \
              --set-env-vars "PRIVATE_KEY=${{ secrets.PROD_PRIVATE_KEY }}" \
              --set-env-vars "CLIENT_EMAIL=${{ secrets.PROD_CLIENT_EMAIL }}" \
              --set-env-vars "CLIENT_ID=${{ secrets.PROD_CLIENT_ID }}" \
              --set-env-vars "AUTH_URI=${{ secrets.PROD_AUTH_URI }}" \
              --set-env-vars "TOKEN_URI=${{ secrets.PROD_TOKEN_URI }}" \
              --set-env-vars "AUTH_PROVIDER_X509_CERT_URL=${{ secrets.PROD_AUTH_PROVIDER_X509_CERT_URL }}" \
              --set-env-vars "CLIENT_X509_CERT_URL=${{ secrets.PROD_CLIENT_X509_CERT_URL }}" \
              --set-env-vars "GSUITE_SUPER_ADMIN=${{ secrets.GSUITE_SUPER_ADMIN }}" \
              --platform "managed" \
              --allow-unauthenticated