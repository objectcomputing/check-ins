package com.objectcomputing.checkins.services.settings;

import com.objectcomputing.checkins.exceptions.BadArgException;
import com.objectcomputing.checkins.exceptions.NotFoundException;
import jakarta.inject.Singleton;
import jakarta.validation.constraints.NotNull;

import java.util.List;
import java.util.UUID;

@Singleton
public class SettingsServicesImpl implements SettingsServices {

    private final SettingsRepository settingsRepository;

    public SettingsServicesImpl(SettingsRepository settingsRepository) {
        this.settingsRepository = settingsRepository;
    }

    public Setting save(Setting setting) {
        if (setting.getId() != null) {
            throw new BadArgException("Setting ID is autogenerated by the server upon creation, and should not be provided.");
        }
        validateSettingOption(setting.getName());
        return settingsRepository.save(setting);
    }

    public Setting update(String name, String value) {
        validateSettingOption(name);
        try {
            Setting setting = settingsRepository.findByName(name).orElseThrow(() -> new NotFoundException("Setting with name " + name + " not found."));
            setting.setValue(value);
            return settingsRepository.update(setting);

        } catch (NotFoundException e ){
            return settingsRepository.save(new Setting(name, value));
        }
    }

    public Setting findByName(@NotNull String name) {
        return settingsRepository.findByName(name)
                .orElseThrow(() -> new NotFoundException("Setting with name " + name + " not found."));
    }

    public List<Setting> findAllSettings() {
        return settingsRepository.findAll();
    }

    public boolean delete(@NotNull UUID id) {
        if (!settingsRepository.existsById(id)) {
            throw new NotFoundException("No setting with id " + id);
        }
        settingsRepository.deleteById(id);
        return true;
    }

    private void validateSettingOption(String name) {
        if(!SettingOption.isValidOption(name)){
            throw new BadArgException("Provided setting name is invalid.");
        }
    }
}
