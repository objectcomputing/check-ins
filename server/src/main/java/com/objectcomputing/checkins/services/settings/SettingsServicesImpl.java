package com.objectcomputing.checkins.services.settings;

import com.objectcomputing.checkins.exceptions.BadArgException;
import com.objectcomputing.checkins.exceptions.NotFoundException;
import io.micronaut.core.annotation.Nullable;
import jakarta.inject.Singleton;
import jakarta.validation.constraints.NotNull;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Singleton
public class SettingsServicesImpl implements SettingsServices {

    private final SettingsRepository settingsRepository;

    public SettingsServicesImpl(SettingsRepository settingsRepository) {
        this.settingsRepository = settingsRepository;
    }

    public Setting save(Setting setting) {
        if (setting.getId() != null) {
            throw new BadArgException("Setting ID is autogenerated by the server upon creation, and should not be provided.");
        }
        validateSettingOption(setting);
        return settingsRepository.save(setting);
    }

    public Setting update(Setting setting) {
        validateSettingOption(setting);
        if ((settingsRepository.existsByIdAndName(setting.getId(), setting.getName()))) {
            return settingsRepository.update(setting);
        } else {
            throw new BadArgException(String.format("Setting %s does not exist, cannot update", setting.getId()));
        }
    }

    public List<SettingsResponseDTO> findByName(@Nullable String name) {
        List<Setting> searchResult = name == null ? settingsRepository.findAll() : settingsRepository.findByName(name);
        return settingToSettingResponseDTO(searchResult);
    }

    public List<SettingsResponseDTO> settingToSettingResponseDTO(List<Setting> settings) {
        List<SettingsResponseDTO> settingResponseDTOs = new ArrayList<>();
        for(Setting setting: settings) {
            SettingsResponseDTO dto = new SettingsResponseDTO();
            dto.setId(setting.getId());
            dto.setName(setting.getName());
            dto.setValue(setting.getValue());
            settingResponseDTOs.add(dto);
        }
        return settingResponseDTOs;
    }

    public Boolean delete(@NotNull UUID id) {
        if (!settingsRepository.existsById(id)) {
            throw new NotFoundException("No setting with id " + id);
        }
        settingsRepository.deleteById(id);
        return true;
    }

    private void validateSettingOption(Setting setting) {
        if(!SettingOption.isValidOption(setting.getName())){
            throw new BadArgException("Provided setting name is invalid.");
        }
    }
}
