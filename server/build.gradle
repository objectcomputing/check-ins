plugins {
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.4.2"
    id "jacoco"
}

archivesBaseName = "check-ins-server"

version "0.3"
group "com.objectcomputing.checkins"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.objectcomputing.*")
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
    publicResources
}

dependencies {
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("javax.annotation:javax.annotation-api")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.testcontainers:testcontainers")
    compileOnly("org.graalvm.nativeimage:svm")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.cache:micronaut-cache-ehcache")
    implementation("io.micronaut.views:micronaut-views-thymeleaf")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")
    testImplementation("org.mockito:mockito-core")

    implementation('org.jetbrains:annotations:19.0.0')
    compile("commons-io:commons-io:2.8.0")
    implementation("com.sun.mail:javax.mail:1.6.2")
    implementation "com.mailjet:mailjet-client:4.2.1"
    implementation "com.google.api-client:google-api-client:1.30.9"
    implementation "com.google.oauth-client:google-oauth-client-jetty:1.28.0"
    implementation "com.google.apis:google-api-services-drive:v3-rev20200326-1.30.9"
    implementation "com.google.apis:google-api-services-gmail:v1-rev20200203-1.30.9"
    implementation "com.google.apis:google-api-services-admin-directory:directory_v1-rev118-1.25.0"
    implementation "jakarta.persistence:jakarta.persistence-api:2.2.2"
    implementation 'com.google.cloud.sql:postgres-socket-factory:1.0.15'
    runtimeOnly "org.fusesource.jansi:jansi:1.18"

    publicResources project(':web-ui')
}

application {
    mainClass.set("com.objectcomputing.checkins.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

dockerBuild {
    images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
}
dockerBuildNative {
    images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
}


test.classpath += configurations.developmentOnly

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.theme=flattop' << '-Dmicronaut.openapi.property.naming.strategy=LOWER_CAMEL_CASE'

    String envStr = System.getenv('MICRONAUT_ENVIRONMENTS')
    List<String> envs = envStr != null ? Arrays.asList(envStr.split(',')) : List.of() as List<String>
    if(!envs.disjoint(List.of("test", "local"))) {
        options.forkOptions.jvmArgs << '-Dmicronaut.openapi.additional.files=src/main/resources/swagger-local'
    } else {
        options.forkOptions.jvmArgs << '-Dmicronaut.openapi.additional.files=src/main/resources/swagger'
    }
}

if(System.getenv("SKIP_WEB_UI") == null) {
    processResources {
        into('public') {
            from configurations.publicResources
        }
    }
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-Xdebug',"-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n")


nativeImage {
    imageName("$archivesBaseName")
    args = ['--report-unsupported-elements-at-runtime']
}
