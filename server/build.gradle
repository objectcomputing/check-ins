import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'maven-publish'
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.0"
    id "jacoco"
    id("org.openrewrite.rewrite") version "latest.release"
}

rewrite {
    activeRecipe("org.openrewrite.java.micronaut.Micronaut3to4Migration")
}

version "0.7.0"
group "com.objectcomputing.checkins"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.objectcomputing.checkins.*")
    }
}

graalvmNative {
    toolchainDetection = false
    binaries {
        all {
            imageName.set('check-ins')

            // See https://github.com/micronaut-projects/micronaut-core/issues/10771
            buildArgs.add("--initialize-at-build-time=kotlin.coroutines.intrinsics.CoroutineSingletons")

            // When we are building on CI, we do not want to include the dev migrations.
            def isCI = System.getenv("CI") != null
            def migrationLocations = isCI ? "db/common" : "db/common,db/dev"
            logger.lifecycle("ℹ️ Building with the migrations from: $migrationLocations")

            // Graal cannot scan for migrations at run-time, so we use this to specify the locations.
            // See https://micronaut-projects.github.io/micronaut-flyway/latest/guide/#graalvm
            buildArgs.add("-Dflyway.locations=$migrationLocations")
        }
    }
}

configurations {
    yarnBuildElements {
        canBeResolved = true
        canBeConsumed = false
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage, "yarnBuild-elements"))
        }
    }
}

dependencies {
    rewrite('org.openrewrite.recipe:rewrite-micronaut:2.5.0')

    runtimeOnly("org.flywaydb:flyway-database-postgresql")
    runtimeOnly("org.yaml:snakeyaml")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")

    compileOnly ("org.projectlombok:lombok")

    annotationProcessor ("org.projectlombok:lombok")
    annotationProcessor ("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")

    yarnBuildElements(project(":web-ui"))

    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-management")
    implementation('io.micronaut:micronaut-runtime')
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("io.micronaut.views:micronaut-views-thymeleaf")
    implementation("io.micronaut.email:micronaut-email-mailjet")
    implementation "io.micronaut:micronaut-http-server-netty"

    implementation("io.swagger.core.v3:swagger-annotations")

    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation "commons-io:commons-io:2.16.1"
    implementation 'org.apache.commons:commons-csv:1.11.0'

    implementation "jakarta.annotation:jakarta.annotation-api"
    implementation "jakarta.persistence:jakarta.persistence-api"

    implementation "com.google.api-client:google-api-client:2.5.1"
    implementation "com.google.oauth-client:google-oauth-client-jetty:1.36.0"
    implementation "com.google.apis:google-api-services-drive:v3-rev20240509-2.0.0"
    implementation "com.google.apis:google-api-services-gmail:v1-rev20240422-2.0.0"
    implementation "com.google.apis:google-api-services-admin-directory:directory_v1-rev20240509-2.0.0"

    implementation 'com.google.cloud.sql:postgres-socket-factory:1.19.0'

    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micrometer:context-propagation")

    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"

    testImplementation('io.projectreactor:reactor-test')
    testImplementation 'io.github.bonigarcia:webdrivermanager:5.8.0'
    testImplementation "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.hamcrest:hamcrest")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.mockito:mockito-core")
}

test {
    if (!System.env['USE_DOCKER_DESKTOP']) {
        OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
        if (os.isLinux()) {
            def uid = ["id", "-u"].execute().text.trim()
            environment "DOCKER_HOST", "unix:///run/user/$uid/podman/podman.sock"
        } else if (os.isMacOsX()) {
            environment "DOCKER_HOST", "unix:///tmp/podman.sock"
        }
        environment "TESTCONTAINERS_RYUK_DISABLED", "true"
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.theme=flattop' << '-Dmicronaut.openapi.property.naming.strategy=LOWER_CAMEL_CASE'

    String envStr = System.getenv('MICRONAUT_ENVIRONMENTS')
    List<String> envs = envStr != null ? Arrays.asList(envStr.split(',')) : List.of() as List<String>
    if (!envs.disjoint(List.of("test", "local"))) {
        options.forkOptions.jvmArgs << '-Dmicronaut.openapi.additional.files=src/main/resources/swagger-local'
    } else {
        options.forkOptions.jvmArgs << '-Dmicronaut.openapi.additional.files=src/main/resources/swagger'
    }
}

if(System.getenv("SKIP_WEB_UI") == null || System.getenv("SKIP_WEB_UI") == "false") {
    processResources {
        into('public') {
            from configurations.named('yarnBuildElements')
        }
    }
}

application {
    mainClass.set("com.objectcomputing.checkins.Application")
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.coverage.jacoco.xmlReportPaths", layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get().asFile
        property "sonar.cpd.exclusions", "**/*DTO.java"
    }
}

publishing {
    publications {
        checkInsProject(MavenPublication) { publication ->
            artifactId = 'check-ins'
            project.shadow.component(publication)
        }
    }

    repositories {
        maven {
            name = "CheckInsProject"
            url = "https://maven.pkg.github.com/objectcomputing/check-ins"
            credentials {
                username = System.getenv("GITHUB_ACTOR")!=null?System.getenv("GITHUB_ACTOR"):"OCI-LABS"
                password = System.getenv("GITHUB_TOKEN")!=null?System.getenv("GITHUB_TOKEN"):"OCI-LABS"
            }
        }
    }
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

run.jvmArgs('-Dcom.sun.management.jmxremote', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000')
