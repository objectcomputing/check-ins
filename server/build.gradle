import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.3.6"
    id "idea"
    id "jacoco"
    id("org.openrewrite.rewrite") version "latest.release"
}

rewrite {
    activeRecipe("org.openrewrite.java.micronaut.Micronaut3to4Migration")
}

version "0.7.0"
group "com.objectcomputing.checkins"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.objectcomputing.checkins.*")
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
    publicResources
}

dependencies {
    rewrite('org.openrewrite.recipe:rewrite-micronaut:2.1.1')
    // TODO when going to jdk21
//    compileOnly ("org.projectlombok:lombok:1.18.30")
//    annotationProcessor ("org.projectlombok:lombok:1.18.30")
    runtimeOnly("org.flywaydb:flyway-database-postgresql")
    runtimeOnly("org.yaml:snakeyaml")
    compileOnly ("org.projectlombok:lombok")
    annotationProcessor ("org.projectlombok:lombok")
    annotationProcessor ("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")

    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-management")
    implementation('io.micronaut:micronaut-runtime')
    implementation("io.micronaut.cache:micronaut-cache-ehcache")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("io.micronaut.views:micronaut-views-thymeleaf")
    implementation("io.swagger.core.v3:swagger-annotations")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.testcontainers:testcontainers")

    testImplementation("org.hamcrest:hamcrest")

    testImplementation("org.mockito:mockito-core")

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation "commons-io:commons-io:2.8.0"
    implementation 'org.apache.commons:commons-csv:1.8'

    implementation "jakarta.annotation:jakarta.annotation-api"
    implementation "jakarta.persistence:jakarta.persistence-api"
    implementation "com.sun.mail:javax.mail:1.6.2" // todo matt
    implementation "com.mailjet:mailjet-client:4.2.1"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "com.google.api-client:google-api-client:1.30.9"
    implementation "com.google.oauth-client:google-oauth-client-jetty:1.28.0"
    implementation "com.google.apis:google-api-services-drive:v3-rev20200326-1.30.9"
    implementation "com.google.apis:google-api-services-gmail:v1-rev20200203-1.30.9"
    implementation "com.google.apis:google-api-services-admin-directory:directory_v1-rev118-1.25.0"

    implementation 'com.google.cloud.sql:postgres-socket-factory:1.0.15' // todo matt

    implementation("io.micronaut.reactor:micronaut-reactor")
    //implementation("io.micronaut.reactor:micronaut-reactor-http-client") // todo matt
    implementation("io.micrometer:context-propagation")
    implementation('io.projectreactor.addons:reactor-adapter:3.4.8') // todo matt
    testImplementation('io.projectreactor:reactor-test') // todo matt
    testImplementation 'io.github.bonigarcia:webdrivermanager:4.1.0'
    testImplementation "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
}

test {
    OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
    if (os.isLinux()) {
        def uid = ["id", "-u"].execute().text.trim()
        environment "DOCKER_HOST", "unix:///run/user/$uid/podman/podman.sock"
    } else if (os.isMacOsX()) {
        environment "DOCKER_HOST", "unix:///tmp/podman.sock"
    }
    environment "TESTCONTAINERS_RYUK_DISABLED", "true"
    environment "FLYWAY_CLEAN_DISABLED", "false"
}


jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required.set(true)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.theme=flattop' << '-Dmicronaut.openapi.property.naming.strategy=LOWER_CAMEL_CASE'

    String envStr = System.getenv('MICRONAUT_ENVIRONMENTS')
    List<String> envs = envStr != null ? Arrays.asList(envStr.split(',')) : List.of() as List<String>
    if (!envs.disjoint(List.of("test", "local"))) {
        options.forkOptions.jvmArgs << '-Dmicronaut.openapi.additional.files=src/main/resources/swagger-local'
    } else {
        options.forkOptions.jvmArgs << '-Dmicronaut.openapi.additional.files=src/main/resources/swagger'
    }
}

if(System.getenv("SKIP_WEB_UI") == null || System.getenv("SKIP_WEB_UI") == "false") {
    evaluationDependsOn(":web-ui")
    processResources {
        into('public') {
            from tasks.getByPath(':web-ui:yarnBuild').outputs
        }
    }
}

application {
    mainClass.set("com.objectcomputing.checkins.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-Xdebug',"-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n")
